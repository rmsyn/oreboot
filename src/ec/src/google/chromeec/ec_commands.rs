pub const EC_CMD_GET_BOARD_VERSION: u16 = 0x0006;
pub const EC_COMMAND_PROTOCOL_3: u8 = 0xda;

pub enum HostEventCode {
    None = 0,
    LidClosed = 1,
    LidOpen = 2,
    PowerButton = 3,
    ACConnected = 4,
    ACDisconnected = 5,
    BatteryLow = 6,
    BatteryCritical = 7,
    Battery = 8,
    ThermalThreshold = 9,
    /* Event generated by a device attached to the EC */
    Device = 10,
    Thermal = 11,
    USBCharger = 12,
    KeyPressed = 13,
    /*
     * EC has finished initializing the host interface.  The host can check
     * for this event following sending a EC_CMD_REBOOT_EC command to
     * determine when the EC is ready to accept subsequent commands.
     */
    InterfaceReady = 14,
    /* Keyboard recovery combo has been pressed */
    KeyboardRecovery = 15,

    /* Shutdown due to thermal overload */
    ThermalShutdown = 16,
    /* Shutdown due to battery level too low */
    BatteryShutdown = 17,

    /* Suggest that the AP throttle itself */
    ThrottleStart = 18,
    /* Suggest that the AP resume normal speed */
    ThrottleStop = 19,

    /* Hang detect logic detected a hang and host event timeout expired */
    HangDetect = 20,
    /* Hang detect logic detected a hang and warm rebooted the AP */
    HangReboot = 21,

    /* PD MCU triggering host event */
    PDMcu = 22,

    /* Battery Status flags have changed */
    BatteryStatus = 23,

    /* EC encountered a panic, triggering a reset */
    Panic = 24,

    /* Keyboard fastboot combo has been pressed */
    KeyboardFastboot = 25,

    /* EC RTC event occurred */
    RTC = 26,

    /* Emulate MKBP event */
    MKBP = 27,

    /* EC desires to change state of host-controlled USB mux */
    USBMux = 28,

    /*
     * The device has changed "modes". This can be one of the following:
     *
     * - TABLET/LAPTOP mode
     * - detachable base attach/detach event
     */
    ModeChange = 29,

    /* Keyboard recovery combo with hardware reinitialization */
    KeyboardRecoveryHWReinit = 30,

    /* WoV */
    WOV = 31,

    /*
     * The high bit of the event mask is not used as a host event code.  If
     * it reads back as set, then the entire event mask should be
     * considered invalid by the host.  This can happen when reading the
     * raw event status via EC_MEMMAP_HOST_EVENTS but the LPC interface is
     * not initialized on the EC, or improperly configured on the host.
     */
    Invalid = 32,
}

#[repr(C)]
pub struct ECResponseBoardVersion {
    board_version: u16,
}

impl ECResponseBoardVersion {
    pub fn new() -> Self {
        Self { board_version: 0 }
    }

    pub fn board_version(&self) -> u16 {
        self.board_version
    }

    pub fn len(&self) -> usize {
        core::mem::size_of::<ECResponseBoardVersion>()
    }

    pub fn as_bytes(&self) -> [u8; 2] {
        self.board_version.to_le_bytes()
    }
}
